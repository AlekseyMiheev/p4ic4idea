/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.groboclown.p4plugin.ui.vcsroot;

import com.intellij.openapi.ui.VerticalFlowLayout;
import com.intellij.openapi.vfs.VirtualFile;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import net.groboclown.p4.server.api.config.part.ConfigPart;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.ResourceBundle;

public class P4RootConfigPanel {
    private final VirtualFile vcsRoot;
    private final ConfigConnectionController configConnectionController;
    private JPanel rootPanel;
    private JPanel myConfigRefreshDetailsPanel;
    private JButton myCheckConnectionButton;
    private JPanel myProblemsPanel;
    private JTextPane myResolvedProperties;
    private JList myProblemsList;
    private ConfigPartStack myConfigPartStack;

    public P4RootConfigPanel(VirtualFile vcsRoot,
            ConfigConnectionController configConnectionController) {
        this.vcsRoot = vcsRoot;
        this.configConnectionController = configConnectionController;

        $$$setupUI$$$();
    }

    JComponent getRootPane() {
        return rootPanel;
    }

    List<ConfigPart> getConfigParts() {
        return myConfigPartStack.getParts();
    }

    void setConfigParts(List<ConfigPart> parts) {
        myConfigPartStack.setParts(parts);
    }

    boolean isModified(List<ConfigPart> configParts) {
        return myConfigPartStack.isModified(configParts);
    }

    private void createUIComponents() {
        // custom component creation code
        myConfigRefreshDetailsPanel = new JPanel(new VerticalFlowLayout());
        myConfigRefreshDetailsPanel.setVisible(false);
        myConfigPartStack = new ConfigPartStack(vcsRoot, configConnectionController);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        rootPanel.add(panel1, BorderLayout.CENTER);
        myConfigRefreshDetailsPanel.setLayout(new FormLayout("fill:d:grow",
                "center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        panel1.add(myConfigRefreshDetailsPanel, BorderLayout.CENTER);
        myProblemsPanel = new JPanel();
        myProblemsPanel.setLayout(new FormLayout("fill:d:grow", "center:d:grow,top:4dlu:noGrow,center:d:grow"));
        CellConstraints cc = new CellConstraints();
        myConfigRefreshDetailsPanel.add(myProblemsPanel, cc.xy(1, 1));
        final JScrollPane scrollPane1 = new JScrollPane();
        myProblemsPanel.add(scrollPane1, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.FILL));
        myProblemsList = new JList();
        scrollPane1.setViewportView(myProblemsList);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:d:grow", "center:d:grow,top:4dlu:noGrow,center:d:grow"));
        myConfigRefreshDetailsPanel.add(panel2, cc.xy(1, 3));
        final JScrollPane scrollPane2 = new JScrollPane();
        panel2.add(scrollPane2, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.FILL));
        myResolvedProperties = new JTextPane();
        myResolvedProperties.setEditable(false);
        Font myResolvedPropertiesFont = this.$$$getFont$$$("DialogInput", -1, -1, myResolvedProperties.getFont());
        if (myResolvedPropertiesFont != null) {
            myResolvedProperties.setFont(myResolvedPropertiesFont);
        }
        myResolvedProperties.setToolTipText(ResourceBundle.getBundle("net/groboclown/p4plugin/P4Bundle")
                .getString("configuration.resolved.tooltip"));
        scrollPane2.setViewportView(myResolvedProperties);
        myConfigRefreshDetailsPanel.add(myConfigPartStack.$$$getRootComponent$$$(), cc.xy(1, 5));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        panel1.add(panel3, BorderLayout.NORTH);
        myCheckConnectionButton = new JButton();
        this.$$$loadButtonText$$$(myCheckConnectionButton, ResourceBundle.getBundle("net/groboclown/p4plugin/P4Bundle")
                .getString("configuration.check-connection.button"));
        panel3.add(myCheckConnectionButton, BorderLayout.EAST);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) {
            return null;
        }
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(),
                size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) {
                    break;
                }
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
