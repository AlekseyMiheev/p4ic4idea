/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.groboclown.p4plugin.ui.vcsroot;

import com.intellij.icons.AllIcons;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import net.groboclown.p4.server.api.config.part.ConfigPart;

import javax.swing.*;
import java.awt.*;
import java.util.ResourceBundle;

public class ConfigPartWrapper {
    private static final Icon DELETE_ITEM = AllIcons.Actions.Delete;
    private static final Icon MOVE_UP = AllIcons.Actions.MoveUp;
    private static final Icon MOVE_DOWN = AllIcons.Actions.MoveDown;
    private static final Icon EXPAND_DESCRIPTION = AllIcons.Actions.Right;
    private static final Icon COLLAPSE_DESCRIPTION = AllIcons.Actions.Down;

    private final ConfigPartUI ui;
    private int position;

    private JPanel rootPane;
    private JPanel panelContainer;
    private JButton myRemoveButton;
    private JButton myUpButton;
    private JButton myDownButton;
    private JPanel myPartDescriptionPanel;
    private JTextArea myPartDescription;
    private JPanel headerPanel;
    private JButton myDescriptionToggle;
    private JLabel myPartName;


    ConfigPartWrapper(ConfigPartUI ui, ListPositionChangeController listPosController) {
        this.ui = ui;

        myRemoveButton.addActionListener(e -> listPosController.removePart());
        myRemoveButton.setIcon(DELETE_ITEM);
        myRemoveButton.setPreferredSize(new Dimension(
                DELETE_ITEM.getIconWidth() + 2,
                DELETE_ITEM.getIconHeight() + 2)
        );

        myUpButton.setEnabled(false);
        myUpButton.addActionListener(e -> listPosController.moveUpPosition());
        myUpButton.setIcon(MOVE_UP);
        myUpButton.setPreferredSize(new Dimension(
                MOVE_UP.getIconWidth() + 2,
                MOVE_UP.getIconHeight() + 2)
        );

        myDownButton.setEnabled(false);
        myDownButton.addActionListener(e -> listPosController.moveDownPosition());
        myDownButton.setIcon(MOVE_DOWN);
        myDownButton.setPreferredSize(new Dimension(
                MOVE_DOWN.getIconWidth() + 2,
                MOVE_DOWN.getIconHeight() + 2)
        );

        myPartDescriptionPanel.setVisible(false);
        myPartDescription.setText(ui.getPartDescription());

        myPartName.setText(ui.getPartTitle());

        myDescriptionToggle.setIcon(EXPAND_DESCRIPTION);
        myDescriptionToggle.setPreferredSize(new Dimension(
                EXPAND_DESCRIPTION.getIconWidth() + 2,
                EXPAND_DESCRIPTION.getIconHeight() + 2
        ));
        myDescriptionToggle.addActionListener((e) -> {
            boolean nextVisibleStateEnabled = !myPartDescriptionPanel.isVisible();
            Icon icon = nextVisibleStateEnabled
                    ? COLLAPSE_DESCRIPTION
                    : EXPAND_DESCRIPTION;
            myPartDescriptionPanel.setVisible(nextVisibleStateEnabled);
            myDescriptionToggle.setIcon(icon);
            myDescriptionToggle.setPreferredSize(new Dimension(icon.getIconWidth() + 2, icon.getIconHeight() + 2));
            rootPane.revalidate();
            rootPane.doLayout();
        });

        panelContainer.add(ui.getPanel(), BorderLayout.CENTER);

        rootPane.doLayout();
    }


    JComponent getRootPane() {
        return rootPane;
    }

    int getPosition() {
        return position;
    }

    ConfigPart getOriginalConfigPart() {
        return ui.getPart();
    }

    @SuppressWarnings("unchecked")
    ConfigPart updateConfigPart() {
        return ui.loadUIValuesIntoPart(ui.getPart());
    }

    void setListPosition(int pos, boolean isFirst, boolean isLast) {
        this.position = pos;
        myUpButton.setEnabled(!isFirst);
        myDownButton.setEnabled(!isLast);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPane = new JPanel();
        rootPane.setLayout(new BorderLayout(0, 0));
        rootPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        panelContainer = new JPanel();
        panelContainer.setLayout(new BorderLayout(0, 0));
        rootPane.add(panelContainer, BorderLayout.CENTER);
        panelContainer.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(4, 4, 2, 4), null));
        headerPanel = new JPanel();
        headerPanel.setLayout(new BorderLayout(0, 0));
        rootPane.add(headerPanel, BorderLayout.NORTH);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        headerPanel.add(panel1, BorderLayout.NORTH);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.add(panel2, BorderLayout.EAST);
        myRemoveButton = new JButton();
        myRemoveButton.setHideActionText(true);
        myRemoveButton.setHorizontalAlignment(0);
        myRemoveButton.setHorizontalTextPosition(0);
        myRemoveButton.setText("");
        myRemoveButton.setToolTipText(
                ResourceBundle.getBundle("net/groboclown/p4plugin/P4Bundle").getString("configuration.stack.remove"));
        panel2.add(myRemoveButton);
        myUpButton = new JButton();
        myUpButton.setHideActionText(true);
        myUpButton.setHorizontalAlignment(0);
        myUpButton.setHorizontalTextPosition(0);
        myUpButton.setText("");
        myUpButton.setToolTipText(
                ResourceBundle.getBundle("net/groboclown/p4plugin/P4Bundle").getString("configuration.stack.move-up"));
        panel2.add(myUpButton);
        myDownButton = new JButton();
        myDownButton.setHideActionText(true);
        myDownButton.setHorizontalAlignment(0);
        myDownButton.setHorizontalTextPosition(0);
        myDownButton.setText("");
        myDownButton.setToolTipText(ResourceBundle.getBundle("net/groboclown/p4plugin/P4Bundle")
                .getString("configuration.stack.move-down"));
        panel2.add(myDownButton);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:grow"));
        panel1.add(panel3, BorderLayout.CENTER);
        myDescriptionToggle = new JButton();
        myDescriptionToggle.setText("");
        myDescriptionToggle.setToolTipText(ResourceBundle.getBundle("net/groboclown/p4plugin/P4Bundle")
                .getString("configuration.stack.wrapper.description.toggle.tooltip"));
        CellConstraints cc = new CellConstraints();
        panel3.add(myDescriptionToggle, cc.xy(1, 1));
        myPartName = new JLabel();
        myPartName.setText("Label");
        panel3.add(myPartName, cc.xy(3, 1));
        myPartDescriptionPanel = new JPanel();
        myPartDescriptionPanel.setLayout(new FormLayout("fill:d:grow", "center:d:grow"));
        headerPanel.add(myPartDescriptionPanel, BorderLayout.CENTER);
        myPartDescription = new JTextArea();
        myPartDescription.setEditable(false);
        myPartDescription.setLineWrap(true);
        myPartDescription.setWrapStyleWord(true);
        myPartDescriptionPanel.add(myPartDescription, cc.xy(1, 1, CellConstraints.FILL, CellConstraints.FILL));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPane;
    }
}
