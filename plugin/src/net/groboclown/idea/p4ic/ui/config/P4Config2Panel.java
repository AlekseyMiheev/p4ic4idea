/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.groboclown.idea.p4ic.ui.config;

import com.intellij.openapi.project.Project;
import net.groboclown.idea.p4ic.config.P4ProjectConfigComponent;
import net.groboclown.idea.p4ic.ui.config.props.ConfigStackPanel;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;

public class P4Config2Panel {
    private ConfigStackPanel configStackPanel;
    private ResolvedPropertiesPanel resolvePropertiesPanel;
    private JPanel rootPanel;
    private JSplitPane splitPane;

    public P4Config2Panel() {
        $$$setupUI$$$();
        configStackPanel.addConfigurationUpdatedListener(resolvePropertiesPanel.getConfigurationUpdatedListener());
        resolvePropertiesPanel.setRequestConfigurationUpdateListener(configStackPanel);
        /*
        splitPane.setDividerLocation(rootPanel.getHeight() / 2);
        rootPanel.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent e) {
                splitPane.setDividerLocation(e.getComponent().getHeight() / 2);
            }

            @Override
            public void componentMoved(ComponentEvent e) {
                // Do nothing
            }

            @Override
            public void componentShown(ComponentEvent e) {
                // Do nothing
            }

            @Override
            public void componentHidden(ComponentEvent e) {
                // Do nothing
            }
        });
        */
    }

    private void createUIComponents() {
        // place custom component creation code here
        configStackPanel = new ConfigStackPanel();
    }

    void initialize(@Nullable Project project) {
        configStackPanel.initialize(project);
    }

    public void saveSettingsToConfig(@NotNull P4ProjectConfigComponent configComponent) {
        configStackPanel.loadFromUI(configComponent);
    }

    public void loadSettingsIntoGUI(@NotNull P4ProjectConfigComponent configComponent) {
        configStackPanel.updateUI(configComponent);
    }

    public boolean isModified(@NotNull P4ProjectConfigComponent configComponent) {
        return configStackPanel.isModified(configComponent);
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        rootPanel.add(panel1, BorderLayout.CENTER);
        splitPane = new JSplitPane();
        splitPane.setContinuousLayout(false);
        splitPane.setDividerSize(8);
        splitPane.setOrientation(0);
        splitPane.setResizeWeight(1.0);
        panel1.add(splitPane, BorderLayout.CENTER);
        splitPane.setLeftComponent(configStackPanel.$$$getRootComponent$$$());
        resolvePropertiesPanel = new ResolvedPropertiesPanel();
        splitPane.setRightComponent(resolvePropertiesPanel.$$$getRootComponent$$$());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
