/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.groboclown.idea.p4ic.ui.config.props;

import com.intellij.icons.AllIcons;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.popup.PopupChooserBuilder;
import com.intellij.ui.components.JBList;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.ui.UIUtil;
import net.groboclown.idea.p4ic.P4Bundle;
import net.groboclown.idea.p4ic.config.P4ProjectConfig;
import net.groboclown.idea.p4ic.config.P4ProjectConfigComponent;
import net.groboclown.idea.p4ic.config.P4ProjectConfigStack;
import net.groboclown.idea.p4ic.config.part.ClientNameDataPart;
import net.groboclown.idea.p4ic.config.part.ConfigPart;
import net.groboclown.idea.p4ic.config.part.DataPart;
import net.groboclown.idea.p4ic.config.part.EnvCompositePart;
import net.groboclown.idea.p4ic.config.part.FileDataPart;
import net.groboclown.idea.p4ic.config.part.RelativeConfigCompositePart;
import net.groboclown.idea.p4ic.config.part.RequirePasswordDataPart;
import net.groboclown.idea.p4ic.config.part.SimpleDataPart;
import net.groboclown.idea.p4ic.ui.ComponentListPanel;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.concurrent.atomic.AtomicLong;

public class ConfigStackPanel {
    private static final Logger LOG = Logger.getInstance(ConfigStackPanel.class);

    private static AtomicLong nextConfigPanelId = new AtomicLong(0);

    private Project project;
    private JPanel rootPanel;
    private JButton addEntryButton;
    private JButton removeEntryButton;
    private JButton moveEntryUpButton;
    private JButton moveEntryDownButton;
    private ComponentListPanel<ConfigPartPanel<?>> componentList;

    private final ArrayList<ConfigurationUpdatedListener> changeListeners =
            new ArrayList<ConfigurationUpdatedListener>(2);
    private final ConfigurationUpdatedListener proxyConfigurationUpdatedListener = new ConfigurationUpdatedListener() {
        @Override
        public void onConfigurationUpdated(@NotNull P4ProjectConfig evt) {
            for (ConfigurationUpdatedListener changeListener : changeListeners) {
                changeListener.onConfigurationUpdated(evt);
            }
        }
    };
    private final ConfigPartUpdatedListener configPartUpdatedListener = new ConfigPartUpdatedListener() {
        @Override
        public void onConfigPartUpdated() {
            sendConfigStackUpdated();
        }
    };

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout(0, 0));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setHorizontalScrollBarPolicy(31);
        rootPanel.add(scrollPane1, BorderLayout.CENTER);
        scrollPane1.setViewportView(componentList);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, BorderLayout.EAST);
        addEntryButton = new JButton();
        addEntryButton.setText("");
        addEntryButton.setToolTipText(
                ResourceBundle.getBundle("net/groboclown/idea/p4ic/P4Bundle").getString("configuration.stack.add"));
        panel1.add(addEntryButton,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeEntryButton = new JButton();
        removeEntryButton.setText("");
        removeEntryButton.setToolTipText(
                ResourceBundle.getBundle("net/groboclown/idea/p4ic/P4Bundle").getString("configuration.stack.remove"));
        panel1.add(removeEntryButton,
                new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1,
                new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                        GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        moveEntryUpButton = new JButton();
        moveEntryUpButton.setText("");
        moveEntryUpButton.setToolTipText(
                ResourceBundle.getBundle("net/groboclown/idea/p4ic/P4Bundle").getString("configuration.stack.move-up"));
        panel1.add(moveEntryUpButton,
                new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        moveEntryDownButton = new JButton();
        moveEntryDownButton.setText("");
        moveEntryDownButton.setToolTipText(ResourceBundle.getBundle("net/groboclown/idea/p4ic/P4Bundle")
                .getString("configuration.stack.move-down"));
        panel1.add(moveEntryDownButton,
                new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    enum ConfigPartType {
        // TODO make these icons all nice.
        ENVIRONMENT(EnvCompositePart.class, "configuration.stack.type.env", AllIcons.Ide.Link) {
            @NotNull
            @Override
            ConfigPartPanel createPanel(@NotNull Project project, @Nullable ConfigPart part) {
                // For Env, we don't have any settings to copy.  So always use a new one.
                return new EnvConfigPartPanel(project, getNextConfigPanelId(), new EnvCompositePart(project));
            }
        },
        PROPERTY(SimpleDataPart.class, "configuration.stack.type.property", AllIcons.General.Configure) {
            @NotNull
            @Override
            ConfigPartPanel createPanel(@NotNull Project project, @Nullable ConfigPart part) {
                final SimpleDataPart cp;
                if (part == null) {
                    cp = new SimpleDataPart(project, (Map<String, String>) null);
                } else {
                    cp = new SimpleDataPart(project, (DataPart) part);
                }
                // FIXME
                return null;
            }
        },
        CLIENT_NAME(ClientNameDataPart.class, "configuration.stack.type.client-name", AllIcons.General.Gear) {
            @NotNull
            @Override
            ConfigPartPanel createPanel(@NotNull Project project, @Nullable ConfigPart part) {
                final ClientNameDataPart cp = new ClientNameDataPart();
                if (part != null) {
                    cp.setClientname(((DataPart) part).getClientname());
                }
                return new ClientNameConfigPartPanel(project, getNextConfigPanelId(), cp);
            }
        },
        FILE(FileDataPart.class, "configuration.stack.type.file", AllIcons.FileTypes.Properties) {
            @NotNull
            @Override
            ConfigPartPanel createPanel(@NotNull Project project, @Nullable ConfigPart part) {
                final FileDataPart cp = new FileDataPart(project);
                if (part != null) {
                    cp.setConfigFile(((FileDataPart) part).getConfigFile());
                }
                return new FileConfigPartPanel(project, getNextConfigPanelId(), cp);
            }
        },
        RELATIVE_FILE(RelativeConfigCompositePart.class, "configuration.stack.type.relative-file",
                AllIcons.FileTypes.Text) {
            @NotNull
            @Override
            ConfigPartPanel createPanel(@NotNull Project project, @Nullable ConfigPart part) {
                final RelativeConfigCompositePart cp = new RelativeConfigCompositePart(project);
                if (part != null) {
                    cp.setName(((RelativeConfigCompositePart) part).getName());
                }
                // FIXME
                return null;
            }
        },
        REQUIRE_PASSWORD(RequirePasswordDataPart.class, "configuration.stack.type.require-password",
                AllIcons.General.Information) {
            @NotNull
            @Override
            ConfigPartPanel createPanel(@NotNull Project project, @Nullable ConfigPart part) {
                // Require password has no settings, so always use a new part.
                return new RequirePasswordConfigPartPanel(project, getNextConfigPanelId(),
                        new RequirePasswordDataPart());
            }
        };

        private final Class<? extends ConfigPart> partClass;
        private final String title;
        private final Icon icon;

        ConfigPartType(@NotNull Class<? extends ConfigPart> partClass, @NotNull @Nls String title, Icon icon) {
            this.partClass = partClass;
            this.title = title;
            this.icon = icon;
        }

        /**
         * Create a new panel for the given part as a template.  The given part must be copied
         * into the panel, and not directly manipulated by the panel.
         *
         * @param project project
         * @param part    source part
         * @return panel
         */
        @NotNull
        abstract ConfigPartPanel createPanel(@NotNull Project project, @Nullable ConfigPart part);
    }

    public ConfigStackPanel() {
        $$$setupUI$$$();
        addEntryButton.setIcon(AllIcons.General.Add);
        addEntryButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                chooseEntry();
            }
        });

        removeEntryButton.setIcon(AllIcons.Actions.Delete);
        removeEntryButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                componentList.removeSelectedChild();
                onListSelectionChanged();
                sendConfigStackUpdated();
            }
        });

        moveEntryUpButton.setIcon(AllIcons.Actions.MoveUp);
        moveEntryUpButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                componentList.moveSelectedChildUp();
                onListSelectionChanged();
                sendConfigStackUpdated();
            }
        });

        moveEntryDownButton.setIcon(AllIcons.Actions.MoveDown);
        moveEntryDownButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                componentList.moveSelectedChildDown();
                onListSelectionChanged();
                sendConfigStackUpdated();
            }
        });


        componentList.addSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                onListSelectionChanged();
            }
        });
    }

    public void initialize(@Nullable Project project) {
        this.project = project;
    }

    public void addChangeListener(@NotNull ConfigurationUpdatedListener changeListener) {
        changeListeners.add(changeListener);
    }

    public void updateUI(@NotNull final P4ProjectConfigComponent component) {
        ApplicationManager.getApplication().invokeLater(new Runnable() {
            @Override
            public void run() {
                componentList.removeAllChildren();

                for (ConfigPart part : component.getUserConfigParts()) {
                    addConfigPart(part);
                }

                onListSelectionChanged();
                sendConfigStackUpdated();
            }
        });
    }

    public void loadFromUI(@NotNull final P4ProjectConfigComponent component) {
        final List<ConfigPartPanel<?>> partPanels = componentList.getChildren();
        ArrayList<ConfigPart> parts = new ArrayList<ConfigPart>(partPanels.size());
        for (ConfigPartPanel<?> cmp : partPanels) {
            parts.add(cmp.copyPart());
        }
        component.setUserConfigParts(parts);
    }

    public boolean isModified(@NotNull P4ProjectConfigComponent configComponent) {
        final List<ConfigPart> originalParts = configComponent.getUserConfigParts();
        final List<ConfigPartPanel<?>> partPanels = componentList.getChildren();
        if (originalParts.size() != partPanels.size()) {
            return true;
        }
        final Iterator<ConfigPart> origs = originalParts.iterator();
        final Iterator nows = partPanels.iterator();
        while (origs.hasNext() && nows.hasNext()) {
            ConfigPart orig = origs.next();
            ConfigPart now = (ConfigPart) nows.next();
            if (!orig.equals(now)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Called as part of the initialization from a project config.  The listener must be invoked
     * after all these are created.
     *
     * @param part part to add
     */
    private void addConfigPart(@NotNull ConfigPart part) {
        final Class<? extends ConfigPart> partClass = part.getClass();
        for (ConfigPartType configPartType : ConfigPartType.values()) {
            if (configPartType.partClass.equals(partClass)) {
                addConfigPartPanel(configPartType.createPanel(project, part), false);
                return;
            }
        }
        throw new IllegalArgumentException("Unexpected config part " + part);
    }

    private void addConfigPartType(@NotNull ConfigPartType type) {
        addConfigPartPanel(type.createPanel(project, null), true);
        sendConfigStackUpdated();
    }

    private <T extends ConfigPart> void addConfigPartPanel(@NotNull ConfigPartPanel<T> panel, boolean sendUpdate) {
        panel.setConfigPartUpdatedListener(configPartUpdatedListener);
        // panel.getRootPanel().setMaximumSize(new Dimension(-1, panel.getRootPanel().getMinimumSize().height));
        componentList.addChildRelativeToSelected(panel, true, true);
        LOG.info("Added component panel " + panel.getClass().getSimpleName());
        if (sendUpdate) {
            sendConfigStackUpdated();
        }
    }

    private void onListSelectionChanged() {
        final ComponentListPanel.SelectedPositionDescription desc = componentList.getSelectedPositionDescription();
        removeEntryButton.setEnabled(desc.canRemove());
        moveEntryUpButton.setEnabled(desc.canMoveUp());
        moveEntryDownButton.setEnabled(desc.canMoveDown());
    }

    private void sendConfigStackUpdated() {
        onListSelectionChanged();
        final List<ConfigPartPanel<?>> partComponents = componentList.getChildren();
        ArrayList<ConfigPart> parts = new ArrayList<ConfigPart>(partComponents.size());
        for (ConfigPartPanel<?> configPartPanel : partComponents) {
            parts.add(configPartPanel.getConfigPart());
        }

        P4ProjectConfig config = new P4ProjectConfigStack(project, parts);
        proxyConfigurationUpdatedListener.onConfigurationUpdated(config);
    }

    // CalledInAWT
    private void chooseEntry() {
        final ConfigPartType[] configTypeValues = ConfigPartType.values();
        final JBList list = new JBList();
        list.setListData(configTypeValues);
        list.setCellRenderer(new ConfigPartTypeCellRenderer());
        // list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // list.setEnabled(true);
        // list.setSelectedIndex(0);
        // list.setFocusable(true);
        new PopupChooserBuilder(list)
                .setCancelOnClickOutside(true)
                .setRequestFocus(true)
                .setTitle(P4Bundle.getString("configuration.stack.choose.title"))
                .setItemChoosenCallback(new Runnable() {
                    @Override
                    public void run() {
                        final int index = list.getSelectedIndex();
                        if (index >= 0 && index < configTypeValues.length) {
                            LOG.info("Adding config type " + configTypeValues[index]);
                            addConfigPartType(configTypeValues[index]);
                        } else {
                            LOG.info("User selected invalid config type index " + index);
                        }
                    }
                })
                .createPopup().showInCenterOf(addEntryButton);

        // ChooseConfigPartDialog dialog = new ChooseConfigPartDialog(project);
        // dialog.show();
        // addConfigPartType(dialog.getChoice());
    }

    private static String getNextConfigPanelId() {
        return Long.toHexString(nextConfigPanelId.incrementAndGet());
    }

    private static class ConfigPartTypeCellRenderer
            implements ListCellRenderer/*<ConfigPartType>*/ {
        final JLabel label = new JLabel();

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected,
                boolean cellHasFocus) {
            ConfigPartType type = (ConfigPartType) value;
            label.setFont(UIUtil.getListFont());
            label.setText(P4Bundle.getString(type.title));
            // label.setIcon(type.icon);
            if (isSelected) {
                label.setBackground(UIUtil.getListSelectionBackground());
                label.setForeground(UIUtil.getListSelectionForeground());
            } else {
                label.setBackground(UIUtil.getListBackground());
                label.setForeground(UIUtil.getListForeground());
            }
            return label;
        }
    }

    private void createUIComponents() {
        // place custom component creation code here
        componentList = new ComponentListPanel<ConfigPartPanel<?>>();
    }


}
