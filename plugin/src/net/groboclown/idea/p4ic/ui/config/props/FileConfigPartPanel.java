/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.groboclown.idea.p4ic.ui.config.props;

import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.TextComponentAccessor;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.ui.TextFieldWithHistoryWithBrowseButton;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import net.groboclown.idea.p4ic.P4Bundle;
import net.groboclown.idea.p4ic.config.part.FileDataPart;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ResourceBundle;

public class FileConfigPartPanel
        extends ConfigPartPanel<FileDataPart> {
    private JPanel rootPanel;
    // private TextFieldWithHistoryWithBrowseButton fileLocation;
    private TextFieldWithBrowseButton fileLocation;
    private JLabel fileLocationLabel;

    protected FileConfigPartPanel(@NotNull Project project,
            @NotNull String id,
            @NotNull FileDataPart part) {
        super(project, id, part);

        fileLocation.addBrowseFolderListener(
                P4Bundle.message("configuration.connection-choice.picker.p4config"),
                P4Bundle.message("configuration.p4config.chooser"),
                project,
                new FileChooserDescriptor(true, false, false, false, false, false)
        );
        fileLocation.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                locationUpdated();
            }
        });
        if (part.getConfigFile() == null && project.getBasePath() != null) {
            // Not in old versions
            // fileLocation.setTextAndAddToHistory(project.getBasePath());
            fileLocation.getTextField().setText(project.getBasePath());
        } else if (part.getConfigFile() != null) {
            fileLocation.getTextField().setText(part.getConfigFile().getPath());
        }

        fileLocationLabel.setLabelFor(fileLocation);
    }

    @NotNull
    @Override
    FileDataPart copyPart() {
        FileDataPart ret = new FileDataPart(getProject());
        ret.setConfigFile(getConfigPart().getConfigFile());
        return ret;
    }

    private void locationUpdated() {
        if (isModified(getConfigPart())) {
            String newLocation = getSelectedLocation();
            if (newLocation == null) {
                getConfigPart().setConfigFile(null);
            } else {
                getConfigPart().setConfigFile(new File(newLocation));
            }
            firePropertyChange();
        }
    }

    @Override
    public boolean isModified(@NotNull FileDataPart originalPart) {
        return (originalPart.getConfigFile() == null && getSelectedLocation() != null)
                || (originalPart.getConfigFile() != null &&
                !originalPart.getConfigFile().getParent().equals(getSelectedLocation()));
    }

    @Override
    public void applySettingsTo(@NotNull FileDataPart userPart) {
        userPart.setConfigFile(getConfigPart().getConfigFile());
    }

    @Override
    JPanel getRootPanel() {
        return rootPanel;
    }

    @Nullable
    String getSelectedLocation() {
        return fileLocation.getText();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:noGrow"));
        fileLocationLabel = new JLabel();
        this.$$$loadLabelText$$$(fileLocationLabel,
                ResourceBundle.getBundle("net/groboclown/idea/p4ic/P4Bundle").getString("configuration.p4config"));
        CellConstraints cc = new CellConstraints();
        rootPanel.add(fileLocationLabel, cc.xy(1, 1));
        fileLocation = new TextFieldWithBrowseButton();
        fileLocation.setText(ResourceBundle.getBundle("net/groboclown/idea/p4ic/P4Bundle")
                .getString("config.file.location.tooltip"));
        fileLocation.setToolTipText(ResourceBundle.getBundle("net/groboclown/idea/p4ic/P4Bundle")
                .getString("configuration.p4config.chooser"));
        rootPanel.add(fileLocation, cc.xy(3, 1));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) {
                    break;
                }
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
