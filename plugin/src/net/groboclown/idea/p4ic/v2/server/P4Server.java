/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.groboclown.idea.p4ic.v2.server;

import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.io.FileUtil;
import com.intellij.openapi.vcs.FilePath;
import com.intellij.openapi.vfs.VirtualFile;
import net.groboclown.idea.p4ic.config.ServerConfig;
import net.groboclown.idea.p4ic.server.ServerExecutor;
import net.groboclown.idea.p4ic.v2.server.cache.ClientServerId;
import net.groboclown.idea.p4ic.v2.server.cache.state.PendingUpdateState;
import net.groboclown.idea.p4ic.v2.server.cache.sync.ClientCacheManager;
import net.groboclown.idea.p4ic.v2.server.connection.AlertManager;
import net.groboclown.idea.p4ic.v2.server.connection.ProjectConfigSource;
import net.groboclown.idea.p4ic.v2.server.connection.ServerConnection;
import net.groboclown.idea.p4ic.v2.server.connection.ServerConnection.CacheQuery;
import net.groboclown.idea.p4ic.v2.server.connection.ServerConnection.CreateUpdate;
import net.groboclown.idea.p4ic.v2.server.connection.ServerConnectionManager;
import net.groboclown.idea.p4ic.v2.server.util.FilePathUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.File;
import java.util.*;

/**
 * Top-level manager for handling communication with the Perforce server
 * for a single client/server connection.
 * <p/>
 * The owner of this object needs to be aware of config changes; those
 * signal that the server instances are no longer valid.
 * It should listen to {@link net.groboclown.idea.p4ic.v2.events.BaseConfigUpdatedListener#TOPIC} events, which
 * are generated by {@link net.groboclown.idea.p4ic.config.P4ConfigProject}.
 * <p/>
 * The owner should also only save the state for valid server objects.
 * <p/>
 * This is a future replacement for {@link ServerExecutor}.  It connects
 * to a {@link ServerConnection}.
 */
public class P4Server {
    private static final Logger LOG = Logger.getInstance(P4Server.class);

    private final Project project;
    private final ServerConnection connection;
    private final AlertManager alertManager;
    private final ProjectConfigSource source;

    private boolean valid = true;


    P4Server(@NotNull final Project project, @NotNull final ProjectConfigSource source) {
        this.project = project;
        this.alertManager = AlertManager.getInstance();
        this.source = source;
        //this.clientState = AllClientsState.getInstance().getStateForClient(clientServerId);
        this.connection = ServerConnectionManager.getInstance().getConnectionFor(
                source.getClientServerId(), source.getServerConfig());
        connection.postSetup(project);

        // Do not reload the caches early.
        // TODO figure out if this is the right behavior.
    }


    @NotNull
    public Project getProject() {
        return project;
    }


    public boolean isValid() {
        return valid;
    }

    public boolean isWorkingOnline() {
        return valid && connection.isWorkingOnline();
    }
    public boolean isWorkingOffline() {
        return ! valid || connection.isWorkingOffline();
    }

    /**
     * This does not perform link expansion (get absolute path).  We
     * assume that if you have a file under a path in a link, you want
     * it to be at that location, and not at its real location.
     *
     * @param file file to match against this client's root directories.
     * @return the directory depth at which this file is in the client.  This is the shallowest depth for all
     *      the client roots.  It returns -1 if there is no match.
     */
    public int getFilePathMatchDepth(@NotNull FilePath file) throws InterruptedException {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Finding depth for " + file + " in " + getClientName());
        }

        final List<File> inputParts = getPathParts(file);

        boolean hadMatch = false;
        int shallowest = Integer.MAX_VALUE;
        for (List<File> rootParts: getRoots()) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("- checking " + rootParts.get(rootParts.size() - 1));
            }

            if (inputParts.size() < rootParts.size()) {
                // input is at a higher ancestor level than the root parts,
                // so there's no way it could be in this root.

                LOG.debug("-- input is parent of root");

                continue;
            }

            // See if input is under the root.
            // We should be able to just call input.isUnder(configRoot), but
            // that seems to be buggy - it reported that "/a/b/c" was under "/a/b/d".

            final File sameRootDepth = inputParts.get(rootParts.size() - 1);
            if (FileUtil.filesEqual(sameRootDepth, rootParts.get(rootParts.size() - 1))) {
                LOG.debug("-- matched");

                // it's a match.  The input file ancestor path that is
                // at the same directory depth as the config root is the same
                // path.
                if (shallowest > rootParts.size()) {
                    shallowest = rootParts.size();
                    LOG.debug("--- shallowest");
                    hadMatch = true;
                }

                // Redundant - no code after this if block
                //continue;
            } else if (LOG.isDebugEnabled()) {
                LOG.debug("-- not matched " + rootParts.get(rootParts.size() - 1) + " vs " + file + " (" + sameRootDepth + ")");
            }

            // Not under the same path, so it's not a match.  Advance to next root.
        }
        return hadMatch ? shallowest : -1;
    }

    /**
     * The root directories that this perforce client covers in this project.
     * It starts with the client workspace directories, then those are stripped
     * down to just the files in the project, then those are limited by the
     * location of the perforce config directory.
     *
     * @return the actual client root directories used by the workspace,
     *      split by parent directories.
     * @throws InterruptedException
     */
    public List<List<File>> getRoots() throws InterruptedException {
        // use the ProjectConfigSource as the lowest level these can be under.
        final Set<List<File>> ret = new HashSet<List<File>>();
        final List<VirtualFile> projectRoots = source.getProjectSourceDirs();
        List<List<File>> projectRootsParts = new ArrayList<List<File>>(projectRoots.size());
        for (VirtualFile projectRoot: projectRoots) {
            projectRootsParts.add(getPathParts(FilePathUtil.getFilePath(projectRoot)));
        }

        LOG.debug("- project roots: " + projectRoots);
        LOG.debug("- client roots: " + getProjectClientRoots());

        // VfsUtilCore.isAncestor seems to bug out at times.
        // Use the File, File version instead.

        for (VirtualFile root : getProjectClientRoots()) {
            final List<File> rootParts = getPathParts(FilePathUtil.getFilePath(root));
            for (List<File> projectRootParts : projectRootsParts) {
                if (projectRootParts.size() >= rootParts.size()) {
                    // projectRoot could be a child of (or is) root
                    if (FileUtil.filesEqual(
                            projectRootParts.get(rootParts.size() - 1),
                            rootParts.get(rootParts.size() - 1))) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("-- projectRoot " + projectRootParts.get(projectRootParts.size() - 1) +
                                    " child of " + root + ", so using the project root");
                        }
                        ret.add(projectRootParts);
                    }
                } else if (rootParts.size() >= projectRootParts.size()) {
                    // root could be a child of (or is) projectRoot
                    if (FileUtil.filesEqual(
                            projectRootParts.get(projectRootParts.size() - 1),
                            rootParts.get(projectRootParts.size() - 1))) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("-- root " + root +
                                    " child of " + projectRootParts
                                    .get(projectRootParts.size() - 1) + ", so using the root");
                        }
                        ret.add(rootParts);
                    }
                }
            }

            // If it is not in any project root, then ignore it.
        }

        // The list could be further simplified, but this should
        // be sufficient.  (Simplification: remove directories that
        // are children of existing directories in the list)

        return new ArrayList<List<File>>(ret);
    }


    /**
     * Returns the client workspace roots limited to the project.  These may be
     * wider than what should be used.
     *
     * @return project-based roots
     * @throws InterruptedException
     */
    private List<VirtualFile> getProjectClientRoots() throws InterruptedException {
        return connection.cacheQuery(new CacheQuery<List<VirtualFile>>() {
            @Override
            public List<VirtualFile> query(@NotNull final ClientCacheManager mgr) throws InterruptedException {
                if (isWorkingOnline()) {
                    LOG.info("working online; loading the cache");
                    connection.query(project, mgr.createWorkspaceRefreshQuery());
                } else {
                    LOG.info("working offline; using cached files.");
                }
                return mgr.getClientRoots(project, alertManager);
            }
        });
    }


    /**
     * Return all files open for edit (or move, delete, etc) on this client.
     *
     * @return opened files state
     */
    public Collection<P4FileAction> getOpenFiles() {
        if (isWorkingOnline()) {
            // Fetch from the server and load up the caches.
        } else {

        }

        // FIXME
        throw new IllegalStateException("not implemented");
    }

    /**
     * Needs to be run immediately.
     *
     * @param files
     * @param changelistId
     */
    public void addOrEditFiles(@NotNull final List<VirtualFile> files, final int changelistId) {
        LOG.info("Add or edit to " + changelistId + " files " + files);
        connection.queueUpdates(project, new CreateUpdate() {
            @Override
            public Collection<PendingUpdateState> create(@NotNull final ClientCacheManager mgr) {
                List<PendingUpdateState> updates = new ArrayList<PendingUpdateState>();
                for (VirtualFile file : files) {
                    final PendingUpdateState update = mgr.editFile(FilePathUtil.getFilePath(file), changelistId);
                    if (update != null) {
                        LOG.info("add pending update " + update);
                        updates.add(update);
                    } else {
                        LOG.info("add/edit caused no update: " + file);
                    }
                }
                return updates;
            }
        });
    }


    /**
     * Set by the owning manager.
     *
     * @param isValid valid state
     */
    void setValid(boolean isValid) {
        valid = isValid;
    }


    public void dispose() {
        valid = false;
    }

    @NotNull
    public ClientServerId getClientServerId() {
        return source.getClientServerId();
    }

    @NotNull
    public ServerConfig getServerConfig() {
        return source.getServerConfig();
    }

    @Nullable
    public String getClientName() {
        return source.getClientName();
    }

    @NotNull
    private List<File> getPathParts(@NotNull final FilePath child) {
        List<File> ret = new ArrayList<File>();
        FilePath next = child;
        while (next != null) {
            ret.add(next.getIOFile());
            next = next.getParentPath();
        }
        Collections.reverse(ret);
        return ret;
    }

    @Override
    public String toString() {
        return getClientServerId().toString();
    }
}
