/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.groboclown.idea.p4ic.v2.server;

import com.intellij.openapi.project.Project;
import net.groboclown.idea.p4ic.config.P4ConfigListener;
import net.groboclown.idea.p4ic.config.ServerConfig;
import net.groboclown.idea.p4ic.server.ServerExecutor;
import net.groboclown.idea.p4ic.v2.server.cache.ClientServerId;
import net.groboclown.idea.p4ic.v2.server.cache.state.AllClientsState;
import net.groboclown.idea.p4ic.v2.server.cache.state.ClientLocalServerState;
import net.groboclown.idea.p4ic.v2.server.connection.AlertManager;
import net.groboclown.idea.p4ic.v2.server.connection.ServerConnection;
import net.groboclown.idea.p4ic.v2.server.connection.ServerConnectionManager;
import org.jetbrains.annotations.NotNull;

import java.util.Collection;

/**
 * Top-level manager for handling communication with the Perforce server
 * for a single client/server connection.
 * <p/>
 * The owner of this object needs to be aware of config changes; those
 * signal that the server instances are no longer valid.
 * It should listen to {@link P4ConfigListener#TOPIC} events, which
 * are generated by {@link net.groboclown.idea.p4ic.config.P4ConfigProject}.
 * <p/>
 * The owner should also only save the state for valid server objects.
 * <p/>
 * This is a future replacement for {@link ServerExecutor}.  It connects
 * to a {@link ServerConnection}.
 */
public class P4Server {
    private final Project project;
    private final ClientLocalServerState clientState;
    private final ServerConnection connection;
    private final AlertManager alertManager;

    private boolean valid = true;


    P4Server(@NotNull final Project project, @NotNull final ClientServerId clientServerId,
            @NotNull ServerConfig config) {
        this.project = project;
        this.alertManager = AlertManager.getInstance();
        this.clientState = AllClientsState.getInstance().getStateForClient(clientServerId);
        this.connection = ServerConnectionManager.getInstance().getConnectionFor(clientServerId, config);

        // FIXME reload the pending updates and put them into the ServerConnection
        throw new IllegalStateException("complete class initialization");
    }


    @NotNull
    public Project getProject() {
        return project;
    }


    public boolean isValid() {
        return valid;
    }

    public boolean isWorkingOnline() {
        return valid && connection.isWorkingOnline();
    }
    public boolean isWorkingOffline() {
        return ! valid || connection.isWorkingOffline();
    }


    /*
    public List<FilePath> getClientRoots() {
        if (isWorkingOnline()) {
            connection.query(project, clientState.);
        }
    }
    */


    /**
     * Return all files open for edit (or move, delete, etc) on this client.
     *
     * @return opened files state
     */
    public Collection<P4FileAction> getOpenFiles() {
        if (isWorkingOnline()) {
            // Fetch from the server and load up the caches.
        } else {

        }

        // FIXME
        throw new IllegalStateException("not implemented");
    }




    /**
     * Set by the owning manager.
     *
     * @param isValid valid state
     */
    void setValid(boolean isValid) {
        valid = isValid;
    }


    public void dispose() {
        valid = false;
    }

    @NotNull
    public ClientServerId getClientServerId() {
        return clientState.getClientServerId();
    }
}
