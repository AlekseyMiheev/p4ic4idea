<?xml version="1.0" encoding="UTF-8"?>
<project name="p4ic4idea" default="main">
    <import file="../build/common.xml"/>

    <property name="output.dir"
              value="work/production/p4ic4idea"/>
    <property name="testoutput.dir"
              value="work/test/p4ic4idea"/>

    <path id="production.classpath">
        <path refid="jdk.classpath"/>
        <path refid="${idea.lowest.classpath}"/>
        <pathelement location="${rootdir}/lib/picocontainer/1.2/picocontainer.jar"/>
        <!-- <pathelement location="${lib.p4java}"/> -->
        <pathelement location="${rootdir}/idea-compat/work/production"/>
        <pathelement location="${rootdir}/p4java/work/production"/>

    </path>

    <path id="test.compile.classpath">
        <path refid="production.classpath"/>
        <path refid="unittest.classpath"/>
        <pathelement location="${output.dir}"/>
    </path>

    <!-- FIXME needs to include the pico container jar -->
    <path id="test.runtime.classpath">
        <path refid="test.compile.classpath"/>
        <path refid="unittest-runtime.classpath"/>
        <pathelement location="${testoutput.dir}"/>
    </path>


    <path id="production.sourcepath">
        <dirset dir="${basedir}">
            <include name="src"/>
        </dirset>
    </path>

    <path id="test.sourcepath">
        <dirset dir="${basedir}">
            <include name="test"/>
        </dirset>
    </path>

    <target name="all" depends="clean, main, test"/>
    <!-- <target name="main" depends="compile, test, plugin.build.jar.p4ic4idea"/> -->
    <target name="main" depends="compile, package"/>

    <target name="compile" depends="compile.production, compile.tests"
            description="Compile module p4ic4idea"/>

    <target name="compile.production" depends="register.custom.compilers"
            description="Compile module p4ic4idea; production classes">
        <mkdir dir="${output.dir}"/>
        <javac2 destdir="${output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}"
                memorymaximumsize="${compiler.max.memory}" fork="true" executable="${jdk.bin}/javac"
                includeantruntime="false">
            <compilerarg line="${compiler.args}"/>
            <bootclasspath refid="bootclasspath"/>
            <classpath refid="production.classpath"/>
            <src refid="production.sourcepath"/>
            <patternset refid="excluded.from.compilation"/>
        </javac2>

        <copy todir="${output.dir}">
            <fileset dir="${basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
            <fileset dir="${basedir}/META-INF">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
            <fileset dir="${basedir}/resources">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.tests"
            depends="register.custom.compilers,compile.production"
            description="compile module p4ic4idea; test classes" unless="skip.tests">
        <mkdir dir="${testoutput.dir}"/>
        <javac2 destdir="${testoutput.dir}" debug="${compiler.debug}"
                nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true"
                executable="${jdk.bin}/javac" includeantruntime="false">
            <compilerarg line="${compiler.args}"/>
            <bootclasspath refid="bootclasspath"/>
            <classpath refid="test.compile.classpath"/>
            <src refid="test.sourcepath"/>
            <patternset refid="excluded.from.compilation"/>
        </javac2>

        <copy todir="${testoutput.dir}">
            <fileset dir="${basedir}/test">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="clean" description="cleanup module">
        <delete dir="${output.dir}"/>
        <delete dir="${testoutput.dir}"/>
        <delete dir="work"/>
    </target>

    <property name="plugin.jar" value="${rootdir}/p4ic4idea.zip"/>

    <!-- Build archive for plugin 'p4ic4idea' -->
    <target name="package" depends="compile.production"
            description="Build plugin archive for module &#39;p4ic4idea&#39;">
        <property name="base.tmp.dir.p4ic4idea" location="${basedir}/work/temp"/>
        <property name="tmp.dir.p4ic4idea" location="${base.tmp.dir.p4ic4idea}/p4ic4idea"/>
        <mkdir dir="${tmp.dir.p4ic4idea}"/>
        <mkdir dir="${tmp.dir.p4ic4idea}/lib"/>
        <jar destfile="${tmp.dir.p4ic4idea}/lib/p4ic4idea.jar" duplicate="preserve">
            <zipfileset dir="${output.dir}"/>
            <zipfileset file="${basedir}/META-INF/plugin.xml" prefix="META-INF"/>
            <manifest>
                <attribute name="Created-By" value="IntelliJ IDEA"/>
                <attribute name="Manifest-Version" value="1.0"/>
            </manifest>
        </jar>
        <!--
        <copy todir="${tmp.dir.p4ic4idea}/lib" flatten="true">
            <fileset dir="${rootdir}/lib">
                <include name="p4java/**/*.jar"/>
                <include name="p4java/**/*.txt"/>
            </fileset>
        </copy>
        -->
        <copy todir="${tmp.dir.p4ic4idea}">
            <fileset dir="${rootdir}">
                <include name="README.md"/>
                <include name="CHANGES.md"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <copy tofile="${tmp.dir.p4ic4idea}/lib/p4java-license.txt"
            file="${rootdir}/p4java/LICENSE"/>
        <copy todir="${tmp.dir.p4ic4idea}/lib"
              file="${rootdir}/p4java/work/p4ic4idea.p4java.jar"/>
        <copy todir="${tmp.dir.p4ic4idea}/lib"
            file="${rootdir}/idea-compat/work/p4ic4idea.idea-compat.jar" />
        <copy todir="${tmp.dir.p4ic4idea}/lib"
            file="${rootdir}/idea135/work/p4ic4idea.idea135-compat.jar"/>
        <copy todir="${tmp.dir.p4ic4idea}/lib"
            file="${rootdir}/idea140/work/p4ic4idea.idea140-compat.jar"/>
        <copy todir="${tmp.dir.p4ic4idea}/lib"
            file="${rootdir}/idea150/work/p4ic4idea.idea150-compat.jar"/>
        <zip destfile="${plugin.jar}">
            <fileset dir="${base.tmp.dir.p4ic4idea}"/>
        </zip>
        <!-- <delete dir="${base.tmp.dir.p4ic4idea}"/> -->
    </target>


    <target name="test" depends="unit-tests,system-tests,test-report" />


    <target name="unit-tests" unless="skip.tests">
        <property name="base.test-data.dir" location="${basedir}/work/test-data"/>
        <mkdir dir="${base.test-data.dir}"/>
        <junit printsummary="yes" fork="yes" forkmode="once" failureProperty="tests.failure"
               errorProperty="tests.error" dir="${base.test-data.dir}">
            <classpath>
                <path location="${testoutput.dir}"/>
                <path refid="test.runtime.classpath"/>
            </classpath>

            <!-- Add the plain output to allow for step-by-step reporting of tests -->
            <formatter type="plain" usefile="no"/>
            <formatter type="xml" usefile="yes"/>

            <batchtest todir="${base.test-data.dir}">
                <fileset dir="${testoutput.dir}" includes="**/*Test.class"/>
            </batchtest>
        </junit>
    </target>


    <target name="system-tests" unless="skip.tests">
        <!-- TODO implement once these are created
        <fail>
            <condition>
                <not>
                    <available type="file" file="${p4d}"/>
                </not>
            </condition>
            Must define property "p4d" referencing a version of the Perforce
            server program for your platform. It can be downloaded for free
            from [http://perforce.com]. (This is used by the tests to
            construct a series of test Perforce servers.)
        </fail>

        <property name="base.test-data.dir" location="${basedir}/work/test-data"/>
        <mkdir dir="${base.test-data.dir}"/>
        <junit printsummary="yes" fork="yes" forkmode="once" failureProperty="tests.failure"
               errorProperty="tests.error" dir="${base.test-data.dir}">
            <classpath>
                <path location="${testoutput.dir}"/>
                <path refid="test.runtime.classpath"/>
            </classpath>

            <formatter type="plain" usefile="no"/>
            <formatter type="xml" usefile="yes"/>

            <batchtest todir="${base.test-data.dir}">
                <fileset dir="${testoutput.dir}" includes="**/*Test.class"/>
            </batchtest>

            <sysproperty key="p4d" file="${p4d}"/>
            <sysproperty key="p4d.basedir" file="${base.test-data.dir}/p4d.base"/>
        </junit>
        -->
    </target>


    <target name="test-report">
        <!-- FIXME junitreport -->

        <fail if="tests.failure"/>
        <fail if="tests.error"/>
    </target>
</project>
